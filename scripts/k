_k_pods () {
  kubectl get pods | grep Running | awk '{ print $1 }' | sed -e 's/-deploy.*$//'
}

_k_sh () {
  kubectl exec -it `kubectl get pods | grep Running | grep $1 | awk '{ print $1 }'` -- sh
}

_k_logs () {
  kubectl logs `kubectl get pods | grep Running | grep $1 | awk '{ print $1 }'`
}

_k_port_forward () {
  pod=$1
  shift
  kubectl port-forward `kubectl get pods | grep Running | grep $pod | awk '{ print $1 }'` $@
}

_k_create_database () {
  kubectl exec `kubectl get pods | grep mysql | grep Running  | awk '{ print $1 }'` -- bash -c "mysql -u \$MYSQL_USER -p\$MYSQL_PASSWORD <<< 'CREATE DATABASE \`$1\`;'"
}

_k_usage () {
  echo 'Usage: k <command>'
  echo 'k pods                                           list running pods'
  echo 'k sh <pod>                                       enter pod'
  echo 'k logs <pod>                                     show pod logs'
  echo 'k port-forward <pod> [local_port:]remote_port    forward port to pod'
  echo 'k create-database <dbname>                       create a new database'
}

k () {
  case $1 in
    pods)
      _k_pods
      ;;

    sh)
      _k_sh $2
      ;;

    logs)
      _k_logs $2
      ;;

    port-forward)
      shift
      _k_port_forward $@
      ;;

    create-database)
      _k_create_database $2
      ;;

    help|-h|-help|--help)
      k-usage
      ;;

    *)
      echo 'Unknow command:' $1
      _k_usage
      ;;
  esac
}

_k_generate_completion () {
  COMPREPLY=($(compgen -W "$1" -- "${COMP_WORDS[COMP_CWORD]}"))
}

_k_pods_completion () {
  _k_generate_completion "$(_k_pods)"
}

_k_commands_completion () {
  _k_generate_completion "pods sh logs port-forward create-database"
}

_k_completion () {
  if [ ${#COMP_WORDS[@]} -gt 1 ]; then
    case "${COMP_WORDS[1]}" in
      sh|logs|port-forward) _k_pods_completion;;
      *) _k_commands_completion;;
    esac
  else
    _k_commands_completion
  fi
}

complete -F _k_completion k
